[{"title":"kubernetes学习笔记(helm)","date":"2021-06-23T10:40:28.357Z","url":"/2021/06/23/helm%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/","tags":[["kubernetes","/tags/kubernetes/"],["helm","/tags/helm/"]],"categories":[["kubernetes","/categories/kubernetes/"]],"content":"安装helm我们可以使用以下命令安装helm 直接执行： 备注: 虽然存在包管理器安装，但官方并不建议使用 helm 基本功能1.创建新的 chart2.chart 打包成 tgz 格式3.上传 chart 到 chart 仓库或从仓库中下载 chart4.在Kubernetes集群中安装或卸载 chart5.管理用Helm安装的 chart 的发布周期 helm基本构成helm三大概念：Chart 代表着 Helm 包。它包含在 Kubernetes 集群内部运行应用程序，工具或服务所需的所有资源定义。你可以把它看作是 Homebrew formula，Apt dpkg，或 Yum RPM 在Kubernetes 中的等价物。 Repository（仓库）是用来存放和共享 charts 的地方。它就像 Perl 的CPAN 档案库网络或是 Fedora 的软件包仓库,只不过它是供 Kubernetes 包所使用的。 Release是运行在 Kubernetes集群中的 chart 的实例。一个chart通常可以在同一个集群中安装多次。每一次安装都会创建一个新的Release。以 MySQL chart为例，如果你想在你的集群中运行两个数据库，你可以安装该chart两次。每一个数据库都会拥有它自己的release和 release name。 在了解了上述这些概念以后，我们就可以这样来解释 Helm： Helm 安装charts到 Kubernetes 集群中，每次安装都会创建一个新的release。你可以在Helm的 chart repositories中寻找新的 chart。 "},{"title":"kubernetes学习笔记(3)","date":"2021-06-23T10:39:52.444Z","url":"/2021/06/23/k8s%20%E9%83%A8%E7%BD%B2%E8%AE%B0%E5%BD%95(3)%20pv&pvc&StorageClass/","tags":[["kubernetes","/tags/kubernetes/"]],"categories":[["kubernetes","/categories/kubernetes/"]],"content":"存储相关概念pv： 持久化卷，可以使用ceph和nfs等pvc: 持久化卷声明,用于调度pv资源StorageClass： 定义存储类型，动态分配存储资源 环境准备首先建立一个nfs的server，此处不做多讲，kubernetes节点上也安装nfs服务 pv相关属性： pv相关属性包括了Capacity(存储能力)、AccessModes(访问模式)、ReclaimPolicy(回收策略)。 基本的capacity指标为storage=”存储容量”。访问模式包含以下三种：ReadWriteOnce（RWO）：读写权限，但是只能被单个节点挂载 ReadOnlyMany（ROX）：只读权限，可以被多个节点挂载 ReadWriteMany（RWX）：读写权限，可以被多个节点挂载 注: 不同的存储方式支持的访问模式不同，请参阅相关指南。回收策略： Retain（保留）- 保留数据，需要管理员手工清理数据 Recycle（回收）- 清除 PV 中的数据，效果相当于执行 rm -rf /yourdir/* Delete（删除）- 与 PV 相连的后端存储完成 volume 的删除操作 pv的状态通常有以下几种：Available（可用）：表示可用状态，还未被任何 PVC 绑定 Bound（已绑定）：表示 PV 已经被 PVC 绑定 Released（已释放）：PVC 被删除，但是资源还未被集群重新声明 Failed（失败）： 表示该 PV 的自动回收失败 pv实践接下来新建pv对象(pv1.yaml)： 应用: 创建pvc 注: pvc会自动寻找available状态的pv，无需额外声明。如果pv为2Gi，pvc为1Gi，同样会进行绑定，且pvc的容量会变成2Gi。 使用pvc作为服务的存储 nginx-service.yaml nginx-ingress.ymal StorageClass实践新建nfs-client的deployment 创建nfs-client的serviceaccount： 此处新建了一个serviceaccount同时绑定了一个clusterrole（用于声明权限） 创建sc对象 使用StorageClass 创建服务 "},{"title":"通过例子学rust(端口嗅探器)","date":"2021-06-19T06:48:35.994Z","url":"/2021/06/19/rust%E5%AD%A6%E4%B9%A0-%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94%E9%80%9A%E8%BF%87%E4%BE%8B%E5%AD%90%E5%AD%A6rust(%E7%AB%AF%E5%8F%A3%E5%97%85%E6%8E%A2%E5%99%A8)/","tags":[["rust","/tags/rust/"]],"categories":[["rust","/categories/rust/"]],"content":"简介个人推荐使用rust的clap库实现命令行程序功能 非原创,原版在这 搬运自 首先分析需求： 获取参数我们使用std::env 来获取用户输入的参数 测试一下得到的结果： 建立结构体我们用结构体来这些参数并且将其实例化 main函数中的错误处理让我们回到main函数 main中执行多线程扫描的部分 scan 函数 完整代码 完整代码 "},{"title":"rust学习笔记(泛型)","date":"2021-06-14T06:46:44.743Z","url":"/2021/06/14/rust%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(%E6%B3%9B%E5%9E%8B)/","tags":[["rust","/tags/rust/"]],"categories":[["rust","/categories/rust/"]],"content":"学习内容来自B站：原子之音 泛型结构体 结构体方法中的泛型 为泛型结构体中特定的类型实现方法 泛型方法 "},{"title":"k8s 学习笔记（二） ingress","date":"2021-06-09T10:34:58.207Z","url":"/2021/06/09/k8s%20%E9%83%A8%E7%BD%B2%E8%AE%B0%E5%BD%95%EF%BC%882%EF%BC%89%20ingress/","tags":[["kubernetes","/tags/kubernetes/"]],"categories":[["kubernetes","/categories/kubernetes/"]],"content":"上次部署完成了k8s的基本框架，现在开始部署ingress，ingress其实就是从 kuberenets 集群外部访问集群的一个入口，将外部的请求转发到集群内不同的 Service 上，其实就相当于 nginx、haproxy 等负载均衡代理服务器。 创建traefik的crd资源 创建rbac.yaml 创建cokfigmap traefik 安装前准备在部署traefik之前 还需要安装Service APIs 安装api的两种方式 网络不佳的情况下 推荐下载下所有文件 创建deploy.yaml 文件 如果需要自定义标签的话 至此 traefik部署完成，如果需要访问traefik的dashboard 部署dashboard 修改本地hosts文件 访问 即可看到dashboard"},{"title":"kubernetes学习笔记（一）","date":"2021-06-07T16:00:00.000Z","url":"/2021/06/08/k8s%20%20%E9%83%A8%E7%BD%B2%E8%AE%B0%E5%BD%95/","tags":[["kubernetes","/tags/kubernetes/"]],"categories":[["kubernetes","/categories/kubernetes/"]],"content":"准备三台干净的服务器，系统版本： CentOS Linux release 7.9.2009 添加hosts 配置docker加速 部署master节点 部署node节点 部署cni 容器网络 验证kubernetes"},{"title":"rust 学习笔记 tide（一）","date":"2021-06-06T08:22:27.177Z","url":"/2021/06/06/rust%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%20tide%EF%BC%88%E4%B8%80%EF%BC%89/","tags":[["rust","/tags/rust/"]],"categories":[["rust","/categories/rust/"]],"content":"tide 简介tide 是rust官方推出的异步web框架，相对actix-web 等缺少路由宏定义(e.g: #[get(“/helloworld”)])，相对来说用的人较少，目前的版本为0.16.0 最简单的tide程序cargo.toml文件内容 main.rs 内容： 这样一个最简单的web服务就完成了，只不过对他发送任何请求都返回404响应，并没有什么实际作用； tide官网的例子以下为官网的例子： 运行这个程序，对其发送一个包含name 和legs的json，它将返回Hello, {name}! I’ve put in an order for {legs} shoes, 注意 leg 为u8 类型，发送过大的数字将导致报错：number too large to fit in target type。 对其发送请求得到的结果如下： "},{"title":"Hello World","date":"2021-06-05T06:30:57.718Z","url":"/2021/06/05/firstblog/","tags":[["杂谈","/tags/%E6%9D%82%E8%B0%88/"]],"categories":[["杂谈","/categories/%E6%9D%82%E8%B0%88/"]],"content":"我的第一篇博客从今天开始正式开始更新博客了各种备忘的以及乱七八糟的东西都放到这从rust,python 的学习笔记到linux,docker 等有机会大概都会在这更新 做个纪录顺便防止自己哪天忘了 hexo主题来源为说明文档地址  "}]